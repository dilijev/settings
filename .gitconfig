[user]
	name = Doug Ilijev
	email = doug.ilijev@datamarx.com

[alias]
	ci = commit
	cm = commit -m
	ca = commit -am
	au = add -u
	amend = commit --amend --no-edit            # amend previous commit, don't change message
	check = commit -m "[checkpoint]"            # make a quick commit to be amended later
	wip   = commit -m "[wip]"                   # make a quick commit to be amended later
	co = checkout
	br = branch
	bv = branch -vv --no-color
	sa  = status                                                        # a for all calculations
	ssa = status -s                                                     # a for all calculations (short)
	ss  = status -s --no-renames -uno --no-ahead-behind                 # default fast (short)
	s   = status    --no-renames -uno --no-ahead-behind                 # default fast
	su  = status    --no-renames -uno --no-ahead-behind                 # u for -uno (intent of which is "fast")
	sf  = status    --no-renames -uno --no-ahead-behind --no-breaks     # f for "fast"
	changed = "!git diff $1~1 $1 #"
	changes = "!git diff --stat $1~1 $1 #"
	changedw = "!git diff -w $1~1 $1 #"
	changesw = "!git diff -w --stat $1~1 $1 #"
	df = diff
	dc = diff --cached
	dn = diff --name-status
	dnn = diff --name-only
	dnn1 = diff --name-only HEAD~1
	dcn = diff --cached --name-status
	dcnn = diff --cached --name-only
	dst = diff --stat
	dcst = diff --cached --stat
	dcsst = diff --cached --shortstat
	sn = show --name-status
	snn = show --name-only
	st = show --stat
	sst = show --shortstat
	msg = show --name-status --pretty=fuller        # get the full (multiline) message (with dates) for the current commit, and files changed
	lsf = ls-files
	fp = fetch --all -p                             # fetch and prune all branches from all remotes
	ff = merge --ff-only
	fg = "!git lsf | grep --color=auto -i $* #"     # "file grep"
	gr = grep -i -n --color=auto
	mt = mergetool
	rc = rebase --continue
	ra = rebase --abort
	pick = cherry-pick
	pk = cherry-pick
	rv = remote -v
	sup = submodule update
	undo = reset --hard HEAD
	base = !git merge-base HEAD $1

	glog = log --graph --date=iso-local
	lg = log --pretty=crispy --date=iso-local -10 --topo-order
	lga = log --pretty=crispy --date=iso-local --topo-order
	lf = log --pretty=crispy --date=iso-local -10 --first-parent
	lfa = log --pretty=crispy --date=iso-local --first-parent
	lfc = log --pretty=crispy-cdate --date=iso-local --first-parent -10
	lfca = log --pretty=crispy-cdate --date=iso-local --first-parent
	lfs = log --pretty=summary --date=format:%y-%m-%d --first-parent -10
	gl = log --graph --pretty=crispy --date=iso-local -10
	gla = log --graph --pretty=crispy --date=iso-local

	cf = config
	cfg = config --global
	cfl = config -l
	cfgl = config --global -l
	hash = rev-parse
	head = rev-parse HEAD
	hh = rev-parse --short
	this = rev-parse --abbrev-ref HEAD          # get the name of the current branch, for scripting
	has = branch -a --contains                  # which branches contain the current commit
	relhas = "!sh -c 'git branch -a --contains $1 | grep -P release\\|[/]master #' $*"                  # which branches contain the current commit
	hasrel = !git relhas $*
	context =   "!git br | sed -e 's/*/ /' | xargs -I % git lf -1 %"
	nocontext = "!git br | sed -e 's/*/ /' | xargs -I % git lf -1 % | grep -vP 'origin[/]|master' | grep --color '[(].*[)]'"
	branches = "for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)'"
	branches-remote = "for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/remotes"
	branches-local = "!git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:iso8601)%09(%(authordate:relative))%09%(refname:short)' refs/heads | grep -vP 'master|released?[/]'"
	ignore = update-index --assume-unchanged
	unignore = update-index --no-assume-unchanged
	ignored = !sh -c 'git ls-files -v | grep -E "^[a-z]"'       # ls-files -v uses lowercase letters for files marked --assume-unchanged

[alias] # experimental scripted commands
	## Figure out the original branch
	tracking = !sh -c 'git rev-parse --abbrev-ref --symbolic-full-name $1@{u}'

	# take the result of $(git tracking) and use sed to find just the name of the remote
	# sed -e "s/\\/.*//" # match a literal '/' to the end of the line and replace with nothing
	tracking-remote = !sh -c 'git tracking | sed -e s/[/].*//' $1
	tr = !git tracking-remote

	tracking-remote-branch = "!sh -c 'git tracking | sed -Ee \"s/[^/]*[/](.*)/\\1/\"' #" $1
	tb = !git tracking-remote-branch

	# fetch this branch from the tracking-remote, and then fast-forward the local branch
	# ffp = "!sh -c 'git fetch $(git tracking-remote) $(git this); git merge --ff-only'"
	ffp = "!sh -c 'git fetch $(git tracking-remote) $(git tracking-remote-branch); git merge --ff-only'"

	## Show changes only in the current branch
	dt = !git diff $(git merge-base $(git tracking) HEAD)

	## Show commits only in the current branch
	lt = !git lg $(git tracking)..

	## List all commits present in this branch that are not present in the named branch
	pending = !git lga $(git merge-base HEAD master)..HEAD

	## List everyone who worked in this file or tree
	authors = "!sh -c 'git log --pretty=\"%an <%ae>\" $* | sort | uniq' $*"
	authors-name-only = "!sh -c 'git log --pretty=\"%an\" $* | sort | uniq' $*"

	filetypes = "!sh -c 'git ls-files | sed -Ee \"s/.*([./][^/.]*)$/\\1/\" | sort | uniq' $*"

[pretty]
	compact      = %C(auto)[ %h ]  %ad  (%C(green dim)%an <%ae>%Creset%C(auto))%n    %s%n
	compact-nc   = [%h]  %ad  (%an <%ae>)%n    %s%n
	crisp        = %C(auto)%h %C(green dim)%<(10,trunc)%ae%Creset%C(auto)%d %s
	crispy       = [ %C(auto)%h ] %ad %C(green dim)%<(20,trunc)%ae%Creset%C(auto)%d %s
	crispy-cdate = [ %C(auto)%h ] %ad |C: %cd %C(green dim)%<(10,trunc)%ae%Creset %C(green dim)%<(20,trunc)|C:%ce%Creset%C(auto)%d %s
	crispy-nc    = [ %h ] %ad | %<(20,trunc)%ae | %s                                               # display crispy with no color formatting (to make it easier to read when saved to a file)
	sweet        = %C(auto)%h %C(green dim)%<(20,trunc)%ae%Creset%C(auto)%d %<(80,trunc)%s         # same as crisp with truncation of the message to 80 char
	brief        = %C(auto)%h | %ad | %C(green dim)%<(7,trunc)%ae%Creset%C(auto) %<(40,trunc)%s    # (80 columns) less emphasis on commit message; more on date, author, PR number
	brief-nc     = %h | %ad | %<(7,trunc)%ae %<(40,trunc)%s                                        # (80 columns) less emphasis on commit message; more on date, author, PR number
    summary      = %ad %an %s
[push]
	default = simple

# stuff that affects output of many git commands, possibly unexpectedly, best to leave it out in case this config is ported to another machine, and set these values on aliased commands instead
[format]
	#pretty = compact
[log]
	#date = format:"%Y-%m-%d %H:%M"         # like ISO but no seconds or timezone
	#date = format:"%Y-%m-%d %H:%M %z"      # like ISO but no seconds (includes timezone %z")
	#date = iso

[merge]
	tool = kdiff3
[credential]
	helper = store
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
